//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class CRoleSpriteWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(CRoleSprite), typeof(UnityEngine.MonoBehaviour));
		L.RegFunction("Stand", Stand);
		L.RegFunction("MoveTo", MoveTo);
		L.RegFunction("SetRoleName", SetRoleName);
		L.RegFunction("SetHeadCanvasVisible", SetHeadCanvasVisible);
		L.RegFunction("SetRoleSartMoveCallBack", SetRoleSartMoveCallBack);
		L.RegFunction("SetRoleEndMoveCallBack", SetRoleEndMoveCallBack);
		L.RegFunction("SetRoleMoveIngCallBack", SetRoleMoveIngCallBack);
		L.RegFunction("ChangeRide", ChangeRide);
		L.RegFunction("SetAddMoveSpeed", SetAddMoveSpeed);
		L.RegFunction("SetPosition", SetPosition);
		L.RegFunction("GetRideGameObject", GetRideGameObject);
		L.RegFunction("SetDepth", SetDepth);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("m_unEntityID", get_m_unEntityID, set_m_unEntityID);
		L.RegVar("m_nRideID", get_m_nRideID, set_m_nRideID);
		L.RegVar("m_fInitVelocity", get_m_fInitVelocity, set_m_fInitVelocity);
		L.RegVar("m_bHasSpecialStand", get_m_bHasSpecialStand, set_m_bHasSpecialStand);
		L.RegVar("m_fNextSpecialStandTime", get_m_fNextSpecialStandTime, set_m_fNextSpecialStandTime);
		L.RegVar("m_strPrefabUrl", get_m_strPrefabUrl, set_m_strPrefabUrl);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Stand(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			CRoleSprite obj = (CRoleSprite)ToLua.CheckObject<CRoleSprite>(L, 1);
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			float arg1 = (float)LuaDLL.luaL_checknumber(L, 3);
			obj.Stand(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int MoveTo(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			CRoleSprite obj = (CRoleSprite)ToLua.CheckObject<CRoleSprite>(L, 1);
			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
			obj.MoveTo(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetRoleName(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			CRoleSprite obj = (CRoleSprite)ToLua.CheckObject<CRoleSprite>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			obj.SetRoleName(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetHeadCanvasVisible(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			CRoleSprite obj = (CRoleSprite)ToLua.CheckObject<CRoleSprite>(L, 1);
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.SetHeadCanvasVisible(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetRoleSartMoveCallBack(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			CRoleSprite obj = (CRoleSprite)ToLua.CheckObject<CRoleSprite>(L, 1);
			OnHeroStarMove arg0 = (OnHeroStarMove)ToLua.CheckDelegate<OnHeroStarMove>(L, 2);
			obj.SetRoleSartMoveCallBack(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetRoleEndMoveCallBack(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			CRoleSprite obj = (CRoleSprite)ToLua.CheckObject<CRoleSprite>(L, 1);
			OnHeroEndMove arg0 = (OnHeroEndMove)ToLua.CheckDelegate<OnHeroEndMove>(L, 2);
			obj.SetRoleEndMoveCallBack(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetRoleMoveIngCallBack(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			CRoleSprite obj = (CRoleSprite)ToLua.CheckObject<CRoleSprite>(L, 1);
			OnHeroMoveIng arg0 = (OnHeroMoveIng)ToLua.CheckDelegate<OnHeroMoveIng>(L, 2);
			obj.SetRoleMoveIngCallBack(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ChangeRide(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			CRoleSprite obj = (CRoleSprite)ToLua.CheckObject<CRoleSprite>(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			UnityEngine.GameObject arg1 = (UnityEngine.GameObject)ToLua.CheckObject(L, 3, typeof(UnityEngine.GameObject));
			obj.ChangeRide(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetAddMoveSpeed(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			CRoleSprite obj = (CRoleSprite)ToLua.CheckObject<CRoleSprite>(L, 1);
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.SetAddMoveSpeed(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetPosition(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			CRoleSprite obj = (CRoleSprite)ToLua.CheckObject<CRoleSprite>(L, 1);
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			float arg1 = (float)LuaDLL.luaL_checknumber(L, 3);
			obj.SetPosition(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetRideGameObject(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			CRoleSprite obj = (CRoleSprite)ToLua.CheckObject<CRoleSprite>(L, 1);
			UnityEngine.GameObject o = obj.GetRideGameObject();
			ToLua.PushSealed(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetDepth(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			CRoleSprite obj = (CRoleSprite)ToLua.CheckObject<CRoleSprite>(L, 1);
			obj.SetDepth();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_m_unEntityID(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			CRoleSprite obj = (CRoleSprite)o;
			uint ret = obj.m_unEntityID;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index m_unEntityID on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_m_nRideID(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			CRoleSprite obj = (CRoleSprite)o;
			int ret = obj.m_nRideID;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index m_nRideID on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_m_fInitVelocity(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			CRoleSprite obj = (CRoleSprite)o;
			float ret = obj.m_fInitVelocity;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index m_fInitVelocity on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_m_bHasSpecialStand(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			CRoleSprite obj = (CRoleSprite)o;
			bool ret = obj.m_bHasSpecialStand;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index m_bHasSpecialStand on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_m_fNextSpecialStandTime(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			CRoleSprite obj = (CRoleSprite)o;
			float ret = obj.m_fNextSpecialStandTime;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index m_fNextSpecialStandTime on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_m_strPrefabUrl(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			CRoleSprite obj = (CRoleSprite)o;
			string ret = obj.m_strPrefabUrl;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index m_strPrefabUrl on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_m_unEntityID(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			CRoleSprite obj = (CRoleSprite)o;
			uint arg0 = (uint)LuaDLL.luaL_checknumber(L, 2);
			obj.m_unEntityID = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index m_unEntityID on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_m_nRideID(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			CRoleSprite obj = (CRoleSprite)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.m_nRideID = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index m_nRideID on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_m_fInitVelocity(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			CRoleSprite obj = (CRoleSprite)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.m_fInitVelocity = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index m_fInitVelocity on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_m_bHasSpecialStand(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			CRoleSprite obj = (CRoleSprite)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.m_bHasSpecialStand = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index m_bHasSpecialStand on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_m_fNextSpecialStandTime(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			CRoleSprite obj = (CRoleSprite)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.m_fNextSpecialStandTime = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index m_fNextSpecialStandTime on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_m_strPrefabUrl(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			CRoleSprite obj = (CRoleSprite)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.m_strPrefabUrl = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index m_strPrefabUrl on a nil value");
		}
	}
}

