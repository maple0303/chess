//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class CBattleRoleWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(CBattleRole), typeof(UnityEngine.MonoBehaviour));
		L.RegFunction("PlayAttackAnimation", PlayAttackAnimation);
		L.RegFunction("PlaySkillAttackAnimation", PlaySkillAttackAnimation);
		L.RegFunction("PlayBeatingAnimation", PlayBeatingAnimation);
		L.RegFunction("PlayRunAnimation", PlayRunAnimation);
		L.RegFunction("PlayBackAnimation", PlayBackAnimation);
		L.RegFunction("PlayDeadAnimation", PlayDeadAnimation);
		L.RegFunction("PlayStandAnimation", PlayStandAnimation);
		L.RegFunction("SetRoleName", SetRoleName);
		L.RegFunction("UpdateHp", UpdateHp);
		L.RegFunction("FlipX", FlipX);
		L.RegFunction("TurnBack", TurnBack);
		L.RegFunction("OnAttackKeyFrameEvent", OnAttackKeyFrameEvent);
		L.RegFunction("SetRoleAttackKeyFrameCallBack", SetRoleAttackKeyFrameCallBack);
		L.RegFunction("SetRoleAttackEndCallBack", SetRoleAttackEndCallBack);
		L.RegFunction("SetRoleBeatKeyFrameCallBack", SetRoleBeatKeyFrameCallBack);
		L.RegFunction("SetRoleBeatEndCallBack", SetRoleBeatEndCallBack);
		L.RegFunction("SetRoleDeadEndCallBack", SetRoleDeadEndCallBack);
		L.RegFunction("SetHeadCanvasVisible", SetHeadCanvasVisible);
		L.RegFunction("SetHPSliderVisible", SetHPSliderVisible);
		L.RegFunction("MoveToPosition", MoveToPosition);
		L.RegFunction("JumpToPosition", JumpToPosition);
		L.RegFunction("HasAction", HasAction);
		L.RegFunction("SetAudioSource", SetAudioSource);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("m_nSpeed", get_m_nSpeed, set_m_nSpeed);
		L.RegVar("m_nSpeedY", get_m_nSpeedY, set_m_nSpeedY);
		L.RegVar("m_arrCanvasPos", get_m_arrCanvasPos, set_m_arrCanvasPos);
		L.RegVar("m_arrChestPos", get_m_arrChestPos, set_m_arrChestPos);
		L.RegVar("m_unEntityID", get_m_unEntityID, set_m_unEntityID);
		L.RegVar("m_nTempID", get_m_nTempID, set_m_nTempID);
		L.RegVar("m_nMaxHP", get_m_nMaxHP, set_m_nMaxHP);
		L.RegVar("m_nCurHP", get_m_nCurHP, set_m_nCurHP);
		L.RegVar("m_nChangeHP", get_m_nChangeHP, set_m_nChangeHP);
		L.RegVar("m_nMetier", get_m_nMetier, set_m_nMetier);
		L.RegVar("m_nBattleSpriteType", get_m_nBattleSpriteType, set_m_nBattleSpriteType);
		L.RegVar("m_nPower", get_m_nPower, set_m_nPower);
		L.RegVar("m_nAttackDistance", get_m_nAttackDistance, set_m_nAttackDistance);
		L.RegVar("m_audioSource", get_m_audioSource, set_m_audioSource);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PlayAttackAnimation(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			CBattleRole obj = (CBattleRole)ToLua.CheckObject<CBattleRole>(L, 1);
			obj.PlayAttackAnimation();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PlaySkillAttackAnimation(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			CBattleRole obj = (CBattleRole)ToLua.CheckObject<CBattleRole>(L, 1);
			obj.PlaySkillAttackAnimation();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PlayBeatingAnimation(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			CBattleRole obj = (CBattleRole)ToLua.CheckObject<CBattleRole>(L, 1);
			obj.PlayBeatingAnimation();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PlayRunAnimation(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			CBattleRole obj = (CBattleRole)ToLua.CheckObject<CBattleRole>(L, 1);
			obj.PlayRunAnimation();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PlayBackAnimation(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			CBattleRole obj = (CBattleRole)ToLua.CheckObject<CBattleRole>(L, 1);
			obj.PlayBackAnimation();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PlayDeadAnimation(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			CBattleRole obj = (CBattleRole)ToLua.CheckObject<CBattleRole>(L, 1);
			obj.PlayDeadAnimation();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PlayStandAnimation(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			CBattleRole obj = (CBattleRole)ToLua.CheckObject<CBattleRole>(L, 1);
			obj.PlayStandAnimation();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetRoleName(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			CBattleRole obj = (CBattleRole)ToLua.CheckObject<CBattleRole>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			obj.SetRoleName(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UpdateHp(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			CBattleRole obj = (CBattleRole)ToLua.CheckObject<CBattleRole>(L, 1);
			obj.UpdateHp();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int FlipX(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			CBattleRole obj = (CBattleRole)ToLua.CheckObject<CBattleRole>(L, 1);
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.FlipX(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int TurnBack(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			CBattleRole obj = (CBattleRole)ToLua.CheckObject<CBattleRole>(L, 1);
			obj.TurnBack();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnAttackKeyFrameEvent(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			CBattleRole obj = (CBattleRole)ToLua.CheckObject<CBattleRole>(L, 1);
			obj.OnAttackKeyFrameEvent();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetRoleAttackKeyFrameCallBack(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			CBattleRole obj = (CBattleRole)ToLua.CheckObject<CBattleRole>(L, 1);
			OnAttackKeyFrame arg0 = (OnAttackKeyFrame)ToLua.CheckDelegate<OnAttackKeyFrame>(L, 2);
			obj.SetRoleAttackKeyFrameCallBack(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetRoleAttackEndCallBack(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			CBattleRole obj = (CBattleRole)ToLua.CheckObject<CBattleRole>(L, 1);
			OnAttackEnd arg0 = (OnAttackEnd)ToLua.CheckDelegate<OnAttackEnd>(L, 2);
			obj.SetRoleAttackEndCallBack(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetRoleBeatKeyFrameCallBack(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			CBattleRole obj = (CBattleRole)ToLua.CheckObject<CBattleRole>(L, 1);
			OnBeatKeyFrame arg0 = (OnBeatKeyFrame)ToLua.CheckDelegate<OnBeatKeyFrame>(L, 2);
			obj.SetRoleBeatKeyFrameCallBack(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetRoleBeatEndCallBack(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			CBattleRole obj = (CBattleRole)ToLua.CheckObject<CBattleRole>(L, 1);
			OnBeatEnd arg0 = (OnBeatEnd)ToLua.CheckDelegate<OnBeatEnd>(L, 2);
			obj.SetRoleBeatEndCallBack(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetRoleDeadEndCallBack(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			CBattleRole obj = (CBattleRole)ToLua.CheckObject<CBattleRole>(L, 1);
			OnDeadEnd arg0 = (OnDeadEnd)ToLua.CheckDelegate<OnDeadEnd>(L, 2);
			obj.SetRoleDeadEndCallBack(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetHeadCanvasVisible(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			CBattleRole obj = (CBattleRole)ToLua.CheckObject<CBattleRole>(L, 1);
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.SetHeadCanvasVisible(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetHPSliderVisible(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			CBattleRole obj = (CBattleRole)ToLua.CheckObject<CBattleRole>(L, 1);
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.SetHPSliderVisible(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int MoveToPosition(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			CBattleRole obj = (CBattleRole)ToLua.CheckObject<CBattleRole>(L, 1);
			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
			OnMoveTargetCallBack arg1 = (OnMoveTargetCallBack)ToLua.CheckDelegate<OnMoveTargetCallBack>(L, 3);
			obj.MoveToPosition(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int JumpToPosition(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			CBattleRole obj = (CBattleRole)ToLua.CheckObject<CBattleRole>(L, 1);
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			UnityEngine.Vector3 arg1 = ToLua.ToVector3(L, 3);
			OnMoveTargetCallBack arg2 = (OnMoveTargetCallBack)ToLua.CheckDelegate<OnMoveTargetCallBack>(L, 4);
			obj.JumpToPosition(arg0, arg1, arg2);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int HasAction(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			CBattleRole obj = (CBattleRole)ToLua.CheckObject<CBattleRole>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			bool o = obj.HasAction(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetAudioSource(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			CBattleRole obj = (CBattleRole)ToLua.CheckObject<CBattleRole>(L, 1);
			UnityEngine.AudioSource arg0 = (UnityEngine.AudioSource)ToLua.CheckObject(L, 2, typeof(UnityEngine.AudioSource));
			obj.SetAudioSource(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_m_nSpeed(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			CBattleRole obj = (CBattleRole)o;
			float ret = obj.m_nSpeed;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index m_nSpeed on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_m_nSpeedY(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			CBattleRole obj = (CBattleRole)o;
			float ret = obj.m_nSpeedY;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index m_nSpeedY on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_m_arrCanvasPos(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			CBattleRole obj = (CBattleRole)o;
			UnityEngine.Vector2[] ret = obj.m_arrCanvasPos;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index m_arrCanvasPos on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_m_arrChestPos(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			CBattleRole obj = (CBattleRole)o;
			UnityEngine.Vector2[] ret = obj.m_arrChestPos;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index m_arrChestPos on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_m_unEntityID(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			CBattleRole obj = (CBattleRole)o;
			uint ret = obj.m_unEntityID;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index m_unEntityID on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_m_nTempID(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			CBattleRole obj = (CBattleRole)o;
			int ret = obj.m_nTempID;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index m_nTempID on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_m_nMaxHP(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			CBattleRole obj = (CBattleRole)o;
			int ret = obj.m_nMaxHP;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index m_nMaxHP on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_m_nCurHP(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			CBattleRole obj = (CBattleRole)o;
			float ret = obj.m_nCurHP;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index m_nCurHP on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_m_nChangeHP(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			CBattleRole obj = (CBattleRole)o;
			float ret = obj.m_nChangeHP;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index m_nChangeHP on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_m_nMetier(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			CBattleRole obj = (CBattleRole)o;
			int ret = obj.m_nMetier;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index m_nMetier on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_m_nBattleSpriteType(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			CBattleRole obj = (CBattleRole)o;
			int ret = obj.m_nBattleSpriteType;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index m_nBattleSpriteType on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_m_nPower(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			CBattleRole obj = (CBattleRole)o;
			int ret = obj.m_nPower;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index m_nPower on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_m_nAttackDistance(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			CBattleRole obj = (CBattleRole)o;
			int ret = obj.m_nAttackDistance;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index m_nAttackDistance on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_m_audioSource(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			CBattleRole obj = (CBattleRole)o;
			UnityEngine.AudioSource ret = obj.m_audioSource;
			ToLua.PushSealed(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index m_audioSource on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_m_nSpeed(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			CBattleRole obj = (CBattleRole)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.m_nSpeed = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index m_nSpeed on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_m_nSpeedY(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			CBattleRole obj = (CBattleRole)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.m_nSpeedY = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index m_nSpeedY on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_m_arrCanvasPos(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			CBattleRole obj = (CBattleRole)o;
			UnityEngine.Vector2[] arg0 = ToLua.CheckStructArray<UnityEngine.Vector2>(L, 2);
			obj.m_arrCanvasPos = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index m_arrCanvasPos on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_m_arrChestPos(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			CBattleRole obj = (CBattleRole)o;
			UnityEngine.Vector2[] arg0 = ToLua.CheckStructArray<UnityEngine.Vector2>(L, 2);
			obj.m_arrChestPos = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index m_arrChestPos on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_m_unEntityID(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			CBattleRole obj = (CBattleRole)o;
			uint arg0 = (uint)LuaDLL.luaL_checknumber(L, 2);
			obj.m_unEntityID = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index m_unEntityID on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_m_nTempID(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			CBattleRole obj = (CBattleRole)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.m_nTempID = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index m_nTempID on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_m_nMaxHP(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			CBattleRole obj = (CBattleRole)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.m_nMaxHP = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index m_nMaxHP on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_m_nCurHP(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			CBattleRole obj = (CBattleRole)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.m_nCurHP = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index m_nCurHP on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_m_nChangeHP(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			CBattleRole obj = (CBattleRole)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.m_nChangeHP = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index m_nChangeHP on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_m_nMetier(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			CBattleRole obj = (CBattleRole)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.m_nMetier = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index m_nMetier on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_m_nBattleSpriteType(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			CBattleRole obj = (CBattleRole)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.m_nBattleSpriteType = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index m_nBattleSpriteType on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_m_nPower(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			CBattleRole obj = (CBattleRole)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.m_nPower = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index m_nPower on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_m_nAttackDistance(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			CBattleRole obj = (CBattleRole)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.m_nAttackDistance = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index m_nAttackDistance on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_m_audioSource(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			CBattleRole obj = (CBattleRole)o;
			UnityEngine.AudioSource arg0 = (UnityEngine.AudioSource)ToLua.CheckObject(L, 2, typeof(UnityEngine.AudioSource));
			obj.m_audioSource = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index m_audioSource on a nil value");
		}
	}
}

