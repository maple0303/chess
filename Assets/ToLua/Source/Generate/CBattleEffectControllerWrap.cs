//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class CBattleEffectControllerWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(CBattleEffectController), typeof(UnityEngine.MonoBehaviour));
		L.RegFunction("StartShake", StartShake);
		L.RegFunction("PlaySlowAction", PlaySlowAction);
		L.RegFunction("StartBlack", StartBlack);
		L.RegFunction("StartWhite", StartWhite);
		L.RegFunction("WhiteToNormal", WhiteToNormal);
		L.RegFunction("BlackToNormal", BlackToNormal);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("m_fRunSpeed", get_m_fRunSpeed, set_m_fRunSpeed);
		L.RegVar("m_fJumpTime", get_m_fJumpTime, set_m_fJumpTime);
		L.RegVar("m_fMoveSpeed", get_m_fMoveSpeed, set_m_fMoveSpeed);
		L.RegVar("m_nShadowMaxNum", get_m_nShadowMaxNum, set_m_nShadowMaxNum);
		L.RegVar("m_fShadowOffsetX", get_m_fShadowOffsetX, set_m_fShadowOffsetX);
		L.RegVar("m_fShadowOffsetY", get_m_fShadowOffsetY, set_m_fShadowOffsetY);
		L.RegVar("m_arrShakeTime", get_m_arrShakeTime, set_m_arrShakeTime);
		L.RegVar("m_arrShakeOffset", get_m_arrShakeOffset, set_m_arrShakeOffset);
		L.RegVar("m_fScaleValue", get_m_fScaleValue, set_m_fScaleValue);
		L.RegVar("m_fAddSpeed1", get_m_fAddSpeed1, set_m_fAddSpeed1);
		L.RegVar("m_fAddSpeed2", get_m_fAddSpeed2, set_m_fAddSpeed2);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int StartShake(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				CBattleEffectController obj = (CBattleEffectController)ToLua.CheckObject<CBattleEffectController>(L, 1);
				EmShakeType arg0 = (EmShakeType)ToLua.CheckObject(L, 2, typeof(EmShakeType));
				obj.StartShake(arg0);
				return 0;
			}
			else if (count == 3)
			{
				CBattleEffectController obj = (CBattleEffectController)ToLua.CheckObject<CBattleEffectController>(L, 1);
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
				float arg1 = (float)LuaDLL.luaL_checknumber(L, 3);
				obj.StartShake(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: CBattleEffectController.StartShake");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PlaySlowAction(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			CBattleEffectController obj = (CBattleEffectController)ToLua.CheckObject<CBattleEffectController>(L, 1);
			System.Action arg0 = (System.Action)ToLua.CheckDelegate<System.Action>(L, 2);
			obj.PlaySlowAction(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int StartBlack(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			CBattleEffectController obj = (CBattleEffectController)ToLua.CheckObject<CBattleEffectController>(L, 1);
			System.Action arg0 = (System.Action)ToLua.CheckDelegate<System.Action>(L, 2);
			obj.StartBlack(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int StartWhite(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			CBattleEffectController obj = (CBattleEffectController)ToLua.CheckObject<CBattleEffectController>(L, 1);
			System.Action arg0 = (System.Action)ToLua.CheckDelegate<System.Action>(L, 2);
			obj.StartWhite(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WhiteToNormal(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			CBattleEffectController obj = (CBattleEffectController)ToLua.CheckObject<CBattleEffectController>(L, 1);
			System.Action arg0 = (System.Action)ToLua.CheckDelegate<System.Action>(L, 2);
			obj.WhiteToNormal(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int BlackToNormal(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			CBattleEffectController obj = (CBattleEffectController)ToLua.CheckObject<CBattleEffectController>(L, 1);
			System.Action arg0 = (System.Action)ToLua.CheckDelegate<System.Action>(L, 2);
			obj.BlackToNormal(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_m_fRunSpeed(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			CBattleEffectController obj = (CBattleEffectController)o;
			float ret = obj.m_fRunSpeed;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index m_fRunSpeed on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_m_fJumpTime(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			CBattleEffectController obj = (CBattleEffectController)o;
			float ret = obj.m_fJumpTime;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index m_fJumpTime on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_m_fMoveSpeed(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			CBattleEffectController obj = (CBattleEffectController)o;
			float ret = obj.m_fMoveSpeed;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index m_fMoveSpeed on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_m_nShadowMaxNum(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			CBattleEffectController obj = (CBattleEffectController)o;
			uint ret = obj.m_nShadowMaxNum;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index m_nShadowMaxNum on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_m_fShadowOffsetX(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			CBattleEffectController obj = (CBattleEffectController)o;
			float ret = obj.m_fShadowOffsetX;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index m_fShadowOffsetX on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_m_fShadowOffsetY(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			CBattleEffectController obj = (CBattleEffectController)o;
			float ret = obj.m_fShadowOffsetY;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index m_fShadowOffsetY on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_m_arrShakeTime(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			CBattleEffectController obj = (CBattleEffectController)o;
			int[] ret = obj.m_arrShakeTime;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index m_arrShakeTime on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_m_arrShakeOffset(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			CBattleEffectController obj = (CBattleEffectController)o;
			float[] ret = obj.m_arrShakeOffset;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index m_arrShakeOffset on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_m_fScaleValue(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			CBattleEffectController obj = (CBattleEffectController)o;
			float ret = obj.m_fScaleValue;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index m_fScaleValue on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_m_fAddSpeed1(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			CBattleEffectController obj = (CBattleEffectController)o;
			float ret = obj.m_fAddSpeed1;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index m_fAddSpeed1 on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_m_fAddSpeed2(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			CBattleEffectController obj = (CBattleEffectController)o;
			float ret = obj.m_fAddSpeed2;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index m_fAddSpeed2 on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_m_fRunSpeed(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			CBattleEffectController obj = (CBattleEffectController)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.m_fRunSpeed = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index m_fRunSpeed on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_m_fJumpTime(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			CBattleEffectController obj = (CBattleEffectController)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.m_fJumpTime = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index m_fJumpTime on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_m_fMoveSpeed(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			CBattleEffectController obj = (CBattleEffectController)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.m_fMoveSpeed = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index m_fMoveSpeed on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_m_nShadowMaxNum(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			CBattleEffectController obj = (CBattleEffectController)o;
			uint arg0 = (uint)LuaDLL.luaL_checknumber(L, 2);
			obj.m_nShadowMaxNum = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index m_nShadowMaxNum on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_m_fShadowOffsetX(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			CBattleEffectController obj = (CBattleEffectController)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.m_fShadowOffsetX = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index m_fShadowOffsetX on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_m_fShadowOffsetY(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			CBattleEffectController obj = (CBattleEffectController)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.m_fShadowOffsetY = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index m_fShadowOffsetY on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_m_arrShakeTime(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			CBattleEffectController obj = (CBattleEffectController)o;
			int[] arg0 = ToLua.CheckNumberArray<int>(L, 2);
			obj.m_arrShakeTime = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index m_arrShakeTime on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_m_arrShakeOffset(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			CBattleEffectController obj = (CBattleEffectController)o;
			float[] arg0 = ToLua.CheckNumberArray<float>(L, 2);
			obj.m_arrShakeOffset = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index m_arrShakeOffset on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_m_fScaleValue(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			CBattleEffectController obj = (CBattleEffectController)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.m_fScaleValue = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index m_fScaleValue on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_m_fAddSpeed1(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			CBattleEffectController obj = (CBattleEffectController)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.m_fAddSpeed1 = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index m_fAddSpeed1 on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_m_fAddSpeed2(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			CBattleEffectController obj = (CBattleEffectController)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.m_fAddSpeed2 = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index m_fAddSpeed2 on a nil value");
		}
	}
}

