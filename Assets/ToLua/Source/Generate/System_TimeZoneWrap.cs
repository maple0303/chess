//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class System_TimeZoneWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(System.TimeZone), typeof(System.Object));
		L.RegFunction("GetDaylightChanges", GetDaylightChanges);
		L.RegFunction("GetUtcOffset", GetUtcOffset);
		L.RegFunction("IsDaylightSavingTime", IsDaylightSavingTime);
		L.RegFunction("ToLocalTime", ToLocalTime);
		L.RegFunction("ToUniversalTime", ToUniversalTime);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("CurrentTimeZone", get_CurrentTimeZone, null);
		L.RegVar("DaylightName", get_DaylightName, null);
		L.RegVar("StandardName", get_StandardName, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetDaylightChanges(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			System.TimeZone obj = (System.TimeZone)ToLua.CheckObject<System.TimeZone>(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			System.Globalization.DaylightTime o = obj.GetDaylightChanges(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetUtcOffset(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			System.TimeZone obj = (System.TimeZone)ToLua.CheckObject<System.TimeZone>(L, 1);
			System.DateTime arg0 = StackTraits<System.DateTime>.Check(L, 2);
			System.TimeSpan o = obj.GetUtcOffset(arg0);
			ToLua.PushValue(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsDaylightSavingTime(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<System.DateTime, System.Globalization.DaylightTime>(L, 1))
			{
				System.DateTime arg0 = StackTraits<System.DateTime>.To(L, 1);
				System.Globalization.DaylightTime arg1 = (System.Globalization.DaylightTime)ToLua.ToObject(L, 2);
				bool o = System.TimeZone.IsDaylightSavingTime(arg0, arg1);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<System.TimeZone, System.DateTime>(L, 1))
			{
				System.TimeZone obj = (System.TimeZone)ToLua.ToObject(L, 1);
				System.DateTime arg0 = StackTraits<System.DateTime>.To(L, 2);
				bool o = obj.IsDaylightSavingTime(arg0);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.TimeZone.IsDaylightSavingTime");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ToLocalTime(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			System.TimeZone obj = (System.TimeZone)ToLua.CheckObject<System.TimeZone>(L, 1);
			System.DateTime arg0 = StackTraits<System.DateTime>.Check(L, 2);
			System.DateTime o = obj.ToLocalTime(arg0);
			ToLua.PushValue(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ToUniversalTime(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			System.TimeZone obj = (System.TimeZone)ToLua.CheckObject<System.TimeZone>(L, 1);
			System.DateTime arg0 = StackTraits<System.DateTime>.Check(L, 2);
			System.DateTime o = obj.ToUniversalTime(arg0);
			ToLua.PushValue(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_CurrentTimeZone(IntPtr L)
	{
		try
		{
			ToLua.PushObject(L, System.TimeZone.CurrentTimeZone);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_DaylightName(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.TimeZone obj = (System.TimeZone)o;
			string ret = obj.DaylightName;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index DaylightName on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_StandardName(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.TimeZone obj = (System.TimeZone)o;
			string ret = obj.StandardName;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index StandardName on a nil value");
		}
	}
}

