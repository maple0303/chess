//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class EmShakeTypeWrap
{
	public static void Register(LuaState L)
	{
		L.BeginEnum(typeof(EmShakeType));
		L.RegVar("EmShakeType_Small", get_EmShakeType_Small, null);
		L.RegVar("EmShakeType_Middle", get_EmShakeType_Middle, null);
		L.RegVar("EmShakeType_Big", get_EmShakeType_Big, null);
		L.RegFunction("IntToEnum", IntToEnum);
		L.EndEnum();
		TypeTraits<EmShakeType>.Check = CheckType;
		StackTraits<EmShakeType>.Push = Push;
	}

	static void Push(IntPtr L, EmShakeType arg)
	{
		ToLua.Push(L, arg);
	}

	static bool CheckType(IntPtr L, int pos)
	{
		return TypeChecker.CheckEnumType(typeof(EmShakeType), L, pos);
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_EmShakeType_Small(IntPtr L)
	{
		ToLua.Push(L, EmShakeType.EmShakeType_Small);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_EmShakeType_Middle(IntPtr L)
	{
		ToLua.Push(L, EmShakeType.EmShakeType_Middle);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_EmShakeType_Big(IntPtr L)
	{
		ToLua.Push(L, EmShakeType.EmShakeType_Big);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IntToEnum(IntPtr L)
	{
		int arg0 = (int)LuaDLL.lua_tonumber(L, 1);
		EmShakeType o = (EmShakeType)arg0;
		ToLua.Push(L, o);
		return 1;
	}
}

